version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo stat | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ocr-pipeline-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - ocr-pipeline-network

  detection:
    build:
      dockerfile: Dockerfile.detection
    ports:
      - "8000:8000"
    volumes:
      - ./configs:/app/configs
    environment:
      - PYTHONPATH=/app
    networks:
      - ocr-pipeline-network

  recognition:
    build:
      dockerfile: Dockerfile.recognition
    ports:
      - "8001:8001"
    volumes:
      - ./configs:/app/configs
    environment:
      - PYTHONPATH=/app
    networks:
      - ocr-pipeline-network
    depends_on:
      kafka:
        condition: service_healthy

  pipeline:
    build:
      dockerfile: Dockerfile.pipeline
    ports:
      - "8002:8002"
    volumes:
      - ./configs:/app/configs
    environment:
      - PYTHONPATH=/app
    networks:
      - ocr-pipeline-network
    depends_on:
      kafka:
        condition: service_healthy

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - ocr-pipeline-network

volumes:
  kafka_data:

networks:
  ocr-pipeline-network:
    driver: bridge
